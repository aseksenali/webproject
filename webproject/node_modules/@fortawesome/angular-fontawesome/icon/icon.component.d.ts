import { OnChanges, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { FaSymbol, FlipProp, IconDefinition, IconProp, PullProp, RotateProp, SizeProp, Styles, Transform } from '@fortawesome/fontawesome-svg-core';
import { FaConfig } from '../config';
import { FaIconLibrary } from '../icon-library';
import { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';
import * as ɵngcc0 from '@angular/core';
export declare class FaIconComponent implements OnChanges {
    private sanitizer;
    private config;
    private iconLibrary;
    private stackItem;
    icon: IconProp;
    /**
     * Specify a title for the icon.
     * This text will be displayed in a tooltip on hover and presented to the
     * screen readers.
     */
    title?: string;
    spin?: boolean;
    pulse?: boolean;
    mask?: IconProp;
    styles?: Styles;
    flip?: FlipProp;
    size?: SizeProp;
    pull?: PullProp;
    border?: boolean;
    inverse?: boolean;
    symbol?: FaSymbol;
    /**
     * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `fixedWidth` with your custom styles instead.
     */
    listItem?: boolean;
    rotate?: RotateProp;
    fixedWidth?: boolean;
    classes?: string[];
    transform?: string | Transform;
    /**
     * Specify the `role` attribute for the rendered <svg> element.
     *
     * @default 'img'
     */
    a11yRole: string;
    /**
     * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `icon` property directly.
     */
    /**
    * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `icon` property directly.
    */
    iconProp: IconProp;
    renderedIconHTML: SafeHtml;
    constructor(sanitizer: DomSanitizer, config: FaConfig, iconLibrary: FaIconLibrary, stackItem: FaStackItemSizeDirective);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Programmatically trigger rendering of the icon.
     *
     * This method is useful, when creating {@link FaIconComponent} dynamically or
     * changing its inputs programmatically as in these cases icon won't be
     * re-rendered automatically.
     */
    render(): void;
    protected findIconDefinition(i: IconProp | IconDefinition): IconDefinition | null;
    protected buildParams(): {
        title: string;
        transform: Transform;
        classes: string[];
        mask: IconDefinition;
        styles: Styles;
        symbol: string | boolean;
        attributes: {
            role: string;
        };
    };
    private renderIcon;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FaIconComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FaIconComponent, "fa-icon", never, {
    "classes": "classes";
    "icon": "icon";
    "title": "title";
    "spin": "spin";
    "pulse": "pulse";
    "mask": "mask";
    "styles": "styles";
    "flip": "flip";
    "size": "size";
    "pull": "pull";
    "border": "border";
    "inverse": "inverse";
    "symbol": "symbol";
    "listItem": "listItem";
    "rotate": "rotate";
    "fixedWidth": "fixedWidth";
    "transform": "transform";
    "a11yRole": "a11yRole";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgRmFTeW1ib2wsIEZsaXBQcm9wLCBJY29uRGVmaW5pdGlvbiwgSWNvblByb3AsIFB1bGxQcm9wLCBSb3RhdGVQcm9wLCBTaXplUHJvcCwgU3R5bGVzLCBUcmFuc2Zvcm0gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUnO1xuaW1wb3J0IHsgRmFDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgRmFJY29uTGlicmFyeSB9IGZyb20gJy4uL2ljb24tbGlicmFyeSc7XG5pbXBvcnQgeyBGYVN0YWNrSXRlbVNpemVEaXJlY3RpdmUgfSBmcm9tICcuLi9zdGFjay9zdGFjay1pdGVtLXNpemUuZGlyZWN0aXZlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZhSWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBjb25maWc7XG4gICAgcHJpdmF0ZSBpY29uTGlicmFyeTtcbiAgICBwcml2YXRlIHN0YWNrSXRlbTtcbiAgICBpY29uOiBJY29uUHJvcDtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGEgdGl0bGUgZm9yIHRoZSBpY29uLlxuICAgICAqIFRoaXMgdGV4dCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhIHRvb2x0aXAgb24gaG92ZXIgYW5kIHByZXNlbnRlZCB0byB0aGVcbiAgICAgKiBzY3JlZW4gcmVhZGVycy5cbiAgICAgKi9cbiAgICB0aXRsZT86IHN0cmluZztcbiAgICBzcGluPzogYm9vbGVhbjtcbiAgICBwdWxzZT86IGJvb2xlYW47XG4gICAgbWFzaz86IEljb25Qcm9wO1xuICAgIHN0eWxlcz86IFN0eWxlcztcbiAgICBmbGlwPzogRmxpcFByb3A7XG4gICAgc2l6ZT86IFNpemVQcm9wO1xuICAgIHB1bGw/OiBQdWxsUHJvcDtcbiAgICBib3JkZXI/OiBib29sZWFuO1xuICAgIGludmVyc2U/OiBib29sZWFuO1xuICAgIHN5bWJvbD86IEZhU3ltYm9sO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFNpbmNlIDAuNS4wLiBXaWxsIGJlIHJlbW92ZWQgaW4gMC42LjAuIFVzZSBgZml4ZWRXaWR0aGAgd2l0aCB5b3VyIGN1c3RvbSBzdHlsZXMgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBsaXN0SXRlbT86IGJvb2xlYW47XG4gICAgcm90YXRlPzogUm90YXRlUHJvcDtcbiAgICBmaXhlZFdpZHRoPzogYm9vbGVhbjtcbiAgICBjbGFzc2VzPzogc3RyaW5nW107XG4gICAgdHJhbnNmb3JtPzogc3RyaW5nIHwgVHJhbnNmb3JtO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIGByb2xlYCBhdHRyaWJ1dGUgZm9yIHRoZSByZW5kZXJlZCA8c3ZnPiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgJ2ltZydcbiAgICAgKi9cbiAgICBhMTF5Um9sZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFNpbmNlIDAuNS4wLiBXaWxsIGJlIHJlbW92ZWQgaW4gMC42LjAuIFVzZSBgaWNvbmAgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICovXG4gICAgLyoqXG4gICAgKiBAZGVwcmVjYXRlZCBTaW5jZSAwLjUuMC4gV2lsbCBiZSByZW1vdmVkIGluIDAuNi4wLiBVc2UgYGljb25gIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICovXG4gICAgaWNvblByb3A6IEljb25Qcm9wO1xuICAgIHJlbmRlcmVkSWNvbkhUTUw6IFNhZmVIdG1sO1xuICAgIGNvbnN0cnVjdG9yKHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBjb25maWc6IEZhQ29uZmlnLCBpY29uTGlicmFyeTogRmFJY29uTGlicmFyeSwgc3RhY2tJdGVtOiBGYVN0YWNrSXRlbVNpemVEaXJlY3RpdmUpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlciByZW5kZXJpbmcgb2YgdGhlIGljb24uXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwsIHdoZW4gY3JlYXRpbmcge0BsaW5rIEZhSWNvbkNvbXBvbmVudH0gZHluYW1pY2FsbHkgb3JcbiAgICAgKiBjaGFuZ2luZyBpdHMgaW5wdXRzIHByb2dyYW1tYXRpY2FsbHkgYXMgaW4gdGhlc2UgY2FzZXMgaWNvbiB3b24ndCBiZVxuICAgICAqIHJlLXJlbmRlcmVkIGF1dG9tYXRpY2FsbHkuXG4gICAgICovXG4gICAgcmVuZGVyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGZpbmRJY29uRGVmaW5pdGlvbihpOiBJY29uUHJvcCB8IEljb25EZWZpbml0aW9uKTogSWNvbkRlZmluaXRpb24gfCBudWxsO1xuICAgIHByb3RlY3RlZCBidWlsZFBhcmFtcygpOiB7XG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgICAgICBjbGFzc2VzOiBzdHJpbmdbXTtcbiAgICAgICAgbWFzazogSWNvbkRlZmluaXRpb247XG4gICAgICAgIHN0eWxlczogU3R5bGVzO1xuICAgICAgICBzeW1ib2w6IHN0cmluZyB8IGJvb2xlYW47XG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIHJvbGU6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHByaXZhdGUgcmVuZGVySWNvbjtcbn1cbiJdfQ==